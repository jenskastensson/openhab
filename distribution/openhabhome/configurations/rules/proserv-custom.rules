import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Math
import java.util.Calendar
import java.util.Date
import java.util.TimeZone
import java.text.SimpleDateFormat

    
/*  To activate this script file, comment or remove the line below to */
COMMENT-THIS-LINE-TO-ACTIVATE-THIS-SCRIPT


//
// The PhasesTotal demonstrates how to calculate the sum of three phases
// Assumes itemProServLog3-5 are bound to phase1-3
//
rule "PhasesTotal"
when
   Item  itemProServLog3 received update or
   Item  itemProServLog4 received update or
   Item  itemProServLog5 received update 
then
	var Number phaseTotal = 0
	logDebug("rule.PhasesTotal","Start execution")
	if ( !(itemProServLog3.state instanceof UnDefType) ) {
		phaseTotal = itemProServLog3.state as DecimalType
	}
	if ( !(itemProServLog4.state instanceof UnDefType) ) {
		phaseTotal = phaseTotal + itemProServLog4.state as DecimalType
	}
	if ( !(itemProServLog5.state instanceof UnDefType) ) {
		phaseTotal = phaseTotal + itemProServLog5.state as DecimalType
	}
	postUpdate(itemNumber1,phaseTotal)
	logDebug("rule.PhasesTotal","End execution")
end


//
// The MinMaxTemperature Script demonstrates how to calculate daily max and min temp
// Assumes itemProServLog38 is bound to outside temperature.
//
rule "MinMaxTemperature"
when
    Item  itemProServLog38 received update
    
then
    var Number Min
    var Number Max
    var String tmp
    logDebug("rule.MinMaxTemperature","Start execution")
    var SimpleDateFormat df = new SimpleDateFormat( "HH:mm" ) 
    
    if (itemProServLog38.state instanceof DecimalType) {
        Min = (itemProServLog38.minimumSince(now.toDateMidnight, "rrd4j").state as DecimalType)
        postUpdate(TempMinOutside, Min)
        tmp = (Math::round(Min.floatValue*10.0)/10.0) + " °C (" + df.format(itemProServLog38.minimumSince(now.toDateMidnight, "rrd4j").timestamp) + " )"
        postUpdate(Temperature_Garden_Min_Formatted, tmp)

        Max = itemProServLog38.maximumSince(now.toDateMidnight, "rrd4j").state as DecimalType
        postUpdate(TempMaxOutside, Max)
        df = new SimpleDateFormat( "HH:mm" ) 
        tmp = (Math::round(Max.floatValue*10.0)/10.0) + " °C (" + df.format(itemProServLog38.maximumSince(now.toDateMidnight, "rrd4j").timestamp) + ")"
        postUpdate(Temperature_Garden_Max_Formatted, tmp)
    }
    logDebug("rule.MinMaxTemperature","End execution")
end

